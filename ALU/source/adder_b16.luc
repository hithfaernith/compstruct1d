module adder_b16 (
  input x[16],
  input y[16],
  input subtract, // s = subtract ? x-y : x+y 
  output s[16], // sum of x and y
  output cout,
  output z,
  output n,
  output v
) {
  full_adder fulladder[16];
  always {
    fulladder.x = x;
    fulladder.y = y;  
    case (subtract) {
      b1: fulladder.y = ~y;
    }
    
    fulladder.cin[0] = subtract;
    fulladder.cin[15:1] = fulladder.cout[14:0];
    s = fulladder.s;
    cout = fulladder.cout[15];
    // output is negative (n) if MSB is 1
    n = fulladder.s[15];
    
    // overflow (v) happens when x and y have the same MSB
    // but the output MSB is different
    v = (
      (x[15] & (y[15] ^ subtract) & ~fulladder.s[15]) |
      (~x[15] & ~(y[15] ^ subtract) & fulladder.s[15])
    );
    
    // (~S31 . A31 . (ALUFN0 xor B31)) + (~(ALUFN0 xor B31) . ~A31 . S31)
  
    z = b0;
    // z is 1 when output (s) is 0 
    if (fulladder.s == 16h0000) {
      z = b1;
    }
  }
}
