module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_cond;
    
    button_conditioner restart_tests_button(.in(io_button[2]));
    
    // For convenience, pausing can either be done by holding down a button,
    // or toggling a dip switch. The signals of the button and the switch
    // are ORed together later on.
    button_conditioner pause_switch(.in(io_dip[2][2]));
    button_conditioner pause_button(.in(io_button[1]));
    
    .rst(rst) {
      counter segment_counter(#SIZE(2), #DIV(10));
    }
  }
  
  multi_segment segment_display(.clk(clk), .rst(rst));
  sig manual_data_input[16];
  sig pause;
  
  tester test(
    .clk(clk),
    .rst(rst),
    .restart_tests(restart_tests_button.out),
    
    .select_data(io_dip[2][1:0]),
    .manual_data_input(manual_data_input),
    .pause(pause),
    .write_enable(io_dip[2][3])
  );
  
  always {
    btn_cond.in = io_button[4];
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out | btn_cond.out;   // conditioned reset_cond
    
    // We only use the first 3 bits to display adder flags
    led[0] = test.z;
    led[1] = test.v;
    led[2] = test.n;
    led[7:3] = 0;
    
    pause = pause_button.out | pause_switch.out;
    
    // total of 16 dip switches for manual input, one per bit
    manual_data_input[7:0] = io_dip[0];
    manual_data_input[15:8] = io_dip[1];
    
    io_led[0] = test.data_display[7:0];
    io_led[1] = test.data_display[15:8];
    io_led[2] = test.state_display;
    
    segment_display.number = test.data_display;
    io_sel = 4b1111; // don't select any 7-segs by default
    io_seg = 8hFF; // blank the target 7-seg by default
    
    // our indicator that an error is happening is activating
    // all the decimal points on the 7-segment display
    if (test.error_is_happening) {
      segment_display.decimal = 4b1111;
    } else {
      segment_display.decimal = 4b0000;
    }
    
    case (segment_counter.value) {
      2b00:
        io_sel = 4b1110;
        io_seg = segment_display.seg_out1;
      2b01:
        io_sel = 4b1101;
        io_seg = segment_display.seg_out2;
      2b10:
        io_sel = 4b1011;
        io_seg = segment_display.seg_out3;
      2b11:
        io_sel = 4b0111;
        io_seg = segment_display.seg_out4;
    }
    
    usb_tx = usb_rx;        // loop serial port
  }
}