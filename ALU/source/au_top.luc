module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  hanoi_display display(.clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  sig tower1[8], tower2[8], tower3[8];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    io_led = io_dip;
    io_seg = 8hFF;
    io_sel = 4b1111;
    
    tower1 = (4 << 5) + 7;
    tower2 = (6 << 5) + 15;
    tower3 = (5 << 5) + 22;

    led = io_dip[0][7:0];
    display.active_disk = io_dip[2][7:4];
    display.player_position = io_dip[0][7:0];
    display.tower_positions = {tower1, tower2, tower3};
    display.enemy_dirs = 8x{{2b11}};
    display.enemy_positions = {
      8b00000001, 8b00100010, 8b01000100, 8b01101000,
      8b10010000, 8b10110001, 8b11010010, 8b11110100
    };
    
    display.tower_disks[0] = io_dip[1][3:0];
    display.tower_disks[1] = io_dip[1][7:4];
    display.tower_disks[2] = io_dip[2][3:0];
    outled = display.led;
  }
}
