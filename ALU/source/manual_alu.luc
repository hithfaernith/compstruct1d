module manual_alu (
    input clk,  // clock
    input rst,  // reset
    
    input in[16],
    input confirm,
    output state_display[2],
    output out[16]
  ) {
  
  .clk(clk) {
    edge_detector edge (#RISE(1), #FALL(0), .in(confirm));
    
    .rst(rst) {
      dff a_reg[16];
      dff b_reg[16];
      dff alufn_reg[6];
      
      fsm state = {INPUT_A, INPUT_B, INPUT_ALUFN, CLEAR};
    }
  }

  alu_full alu(.a(a_reg.q), .b(b_reg.q), .alufn(alufn_reg.q));
  
  always {
    state_display = 0;
    case (state.q) {
      state.INPUT_A:
        a_reg.d = in;
        state_display = 1;
        if (edge.out)
          state.d = state.INPUT_B;
          
      state.INPUT_B:
        b_reg.d = in;
        state_display = 2;
        if (edge.out)
          state.d = state.INPUT_ALUFN;
          
      state.INPUT_ALUFN:
        alufn_reg.d = in[5:0];
        state_display = 3;
        if (edge.out)
          state.d = state.CLEAR;
          
      state.CLEAR:
        state_display = 4;
        a_reg.d = 0;
        b_reg.d = 0;
        alufn_reg.d = 0;
        if (edge.out)
          state.d = state.INPUT_A;
    }
    out = alu.out;
  }
}
