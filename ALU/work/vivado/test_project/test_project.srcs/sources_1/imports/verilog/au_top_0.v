/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_cond_out;
  reg [1-1:0] M_btn_cond_in;
  button_conditioner_2 btn_cond (
    .clk(clk),
    .in(M_btn_cond_in),
    .out(M_btn_cond_out)
  );
  wire [2-1:0] M_segment_counter_value;
  counter_3 segment_counter (
    .clk(clk),
    .rst(rst),
    .value(M_segment_counter_value)
  );
  wire [1-1:0] M_slowclock_value;
  counter_4 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  wire [1-1:0] M_medclock_value;
  counter_5 medclock (
    .clk(clk),
    .rst(rst),
    .value(M_medclock_value)
  );
  
  reg [15:0] a_value;
  
  reg [15:0] b_value;
  
  integer [15:0] display_number;
  
  integer [1:0] display_select;
  
  wire [16-1:0] M_reg_a_out;
  reg [16-1:0] M_reg_a_write_val;
  dff_b16_6 reg_a (
    .clk(M_medclock_value),
    .rst(rst),
    .write_enable(1'h1),
    .write_val(M_reg_a_write_val),
    .out(M_reg_a_out)
  );
  
  wire [16-1:0] M_reg_b_out;
  reg [16-1:0] M_reg_b_write_val;
  dff_b16_6 reg_b (
    .clk(M_medclock_value),
    .rst(rst),
    .write_enable(1'h1),
    .write_val(M_reg_b_write_val),
    .out(M_reg_b_out)
  );
  
  wire [16-1:0] M_alufn_out;
  reg [16-1:0] M_alufn_write_val;
  dff_b16_6 alufn (
    .clk(M_medclock_value),
    .rst(rst),
    .write_enable(1'h1),
    .write_val(M_alufn_write_val),
    .out(M_alufn_out)
  );
  
  wire [8-1:0] M_segment_display_seg_out1;
  wire [8-1:0] M_segment_display_seg_out2;
  wire [8-1:0] M_segment_display_seg_out3;
  wire [8-1:0] M_segment_display_seg_out4;
  reg [16-1:0] M_segment_display_number;
  multi_segment_7 segment_display (
    .clk(clk),
    .rst(rst),
    .number(M_segment_display_number),
    .seg_out1(M_segment_display_seg_out1),
    .seg_out2(M_segment_display_seg_out2),
    .seg_out3(M_segment_display_seg_out3),
    .seg_out4(M_segment_display_seg_out4)
  );
  
  wire [16-1:0] M_adder_unit_s;
  wire [1-1:0] M_adder_unit_cout;
  wire [1-1:0] M_adder_unit_z;
  wire [1-1:0] M_adder_unit_n;
  wire [1-1:0] M_adder_unit_v;
  reg [16-1:0] M_adder_unit_x;
  reg [16-1:0] M_adder_unit_y;
  reg [1-1:0] M_adder_unit_subtract;
  adder_b16_8 adder_unit (
    .x(M_adder_unit_x),
    .y(M_adder_unit_y),
    .subtract(M_adder_unit_subtract),
    .s(M_adder_unit_s),
    .cout(M_adder_unit_cout),
    .z(M_adder_unit_z),
    .n(M_adder_unit_n),
    .v(M_adder_unit_v)
  );
  
  always @* begin
    M_btn_cond_in = io_button[4+0-:1];
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out | M_btn_cond_out;
    M_reg_a_write_val = M_reg_a_out;
    M_reg_b_write_val = M_reg_b_out;
    M_alufn_write_val = M_alufn_out;
    a_value = M_reg_a_out;
    io_led = 24'h000000;
    display_number = 16'h0000;
    display_select = io_dip[16+6+1-:2];
    M_adder_unit_x = display_number;
    M_adder_unit_y = 16'h0000;
    M_adder_unit_subtract = 1'h1;
    if (io_dip[16+0+0-:1] == 1'h1) begin
      M_adder_unit_y = 16'h0001;
    end
    
    case (display_select)
      2'h0: begin
        display_number = M_reg_a_out;
        M_reg_a_write_val = M_adder_unit_s;
      end
      2'h1: begin
        display_number = M_reg_b_out;
        M_reg_b_write_val = M_adder_unit_s;
      end
      2'h2: begin
        display_number = M_alufn_out;
        M_alufn_write_val = M_adder_unit_s;
      end
    endcase
    M_segment_display_number = display_number;
    io_sel = 4'hf;
    io_seg = 8'hff;
    
    case (M_segment_counter_value)
      2'h0: begin
        io_sel = 4'he;
        io_seg = M_segment_display_seg_out1;
      end
      2'h1: begin
        io_sel = 4'hd;
        io_seg = M_segment_display_seg_out2;
      end
      2'h2: begin
        io_sel = 4'hb;
        io_seg = M_segment_display_seg_out3;
      end
      2'h3: begin
        io_sel = 4'h7;
        io_seg = M_segment_display_seg_out4;
      end
    endcase
    usb_tx = usb_rx;
    led = 8'haa;
  end
endmodule
