/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifter_8 (
    input clk,
    input rst,
    input [15:0] number,
    input [3:0] bits,
    input activate,
    input [1:0] shift_type,
    output reg [15:0] out
  );
  
  
  
  localparam LEFT_SHIFT = 2'h2;
  
  localparam RIGHT_SHIFT = 2'h1;
  
  localparam RIGHT_ARITH_SHIFT = 2'h3;
  
  integer bit_mask;
  integer right_shifted;
  
  always @* begin
    
    case (bits)
      4'hf: begin
        bit_mask = 16'hfffe;
      end
      4'he: begin
        bit_mask = 16'hfffc;
      end
      4'hd: begin
        bit_mask = 16'hfff8;
      end
      4'hc: begin
        bit_mask = 16'hfff0;
      end
      4'hb: begin
        bit_mask = 16'hffe0;
      end
      4'ha: begin
        bit_mask = 16'hffc0;
      end
      4'h9: begin
        bit_mask = 16'hff80;
      end
      4'h8: begin
        bit_mask = 16'hff00;
      end
      4'h7: begin
        bit_mask = 16'hfe00;
      end
      4'h6: begin
        bit_mask = 16'hfc00;
      end
      4'h5: begin
        bit_mask = 16'hf800;
      end
      4'h4: begin
        bit_mask = 16'hf000;
      end
      4'h3: begin
        bit_mask = 16'he000;
      end
      4'h2: begin
        bit_mask = 16'hc000;
      end
      4'h1: begin
        bit_mask = 16'h8000;
      end
      default: begin
        bit_mask = 16'h0000;
      end
    endcase
    out = number;
    if (activate) begin
      if (shift_type == 2'h2) begin
        out = number << bits;
      end else begin
        if (shift_type == 2'h1) begin
          out = number >> bits;
        end else begin
          if (shift_type == 2'h3) begin
            right_shifted = number >> bits;
            if (number[15+0-:1] == 1'h1) begin
              out = right_shifted & bit_mask;
            end else begin
              out = right_shifted | ~bit_mask;
            end
          end
        end
      end
    end
  end
endmodule
