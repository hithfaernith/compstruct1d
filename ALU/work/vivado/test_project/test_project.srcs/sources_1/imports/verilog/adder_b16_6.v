/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_b16_6 (
    input [15:0] x,
    input [15:0] y,
    input subtract,
    output reg [15:0] s,
    output reg cout,
    output reg z,
    output reg n,
    output reg v
  );
  
  
  
  wire [(5'h10+0)-1:0] M_fulladder_s;
  wire [(5'h10+0)-1:0] M_fulladder_cout;
  reg [(5'h10+0)-1:0] M_fulladder_x;
  reg [(5'h10+0)-1:0] M_fulladder_y;
  reg [(5'h10+0)-1:0] M_fulladder_cin;
  
  genvar GEN_fulladder0;
  generate
  for (GEN_fulladder0=0;GEN_fulladder0<5'h10;GEN_fulladder0=GEN_fulladder0+1) begin: fulladder_gen_0
    full_adder_8 fulladder (
      .x(M_fulladder_x[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .y(M_fulladder_y[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder_cin[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .s(M_fulladder_s[GEN_fulladder0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder_cout[GEN_fulladder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_fulladder_x = x;
    M_fulladder_y = y;
    
    case (subtract)
      1'h1: begin
        M_fulladder_y = ~y;
      end
    endcase
    M_fulladder_cin[0+0-:1] = subtract;
    M_fulladder_cin[1+14-:15] = M_fulladder_cout[0+14-:15];
    s = M_fulladder_s;
    cout = M_fulladder_cout[15+0-:1];
    n = M_fulladder_s[15+0-:1];
    v = ((x[15+0-:1] & y[15+0-:1] & ~M_fulladder_s[15+0-:1]) | (~x[15+0-:1] & ~y[15+0-:1] & M_fulladder_s[15+0-:1]));
    z = 1'h0;
    
    case (M_fulladder_s)
      16'h0000: begin
        z = 1'h1;
      end
    endcase
  end
endmodule
