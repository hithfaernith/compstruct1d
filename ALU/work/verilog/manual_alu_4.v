/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module manual_alu_4 (
    input clk,
    input rst,
    input [15:0] in,
    input confirm,
    output reg [1:0] state_display,
    output reg [15:0] out
  );
  
  
  
  wire [1-1:0] M_edge_out;
  edge_detector_8 L_edge (
    .clk(clk),
    .in(confirm),
    .out(M_edge_out)
  );
  reg [15:0] M_a_reg_d, M_a_reg_q = 1'h0;
  reg [15:0] M_b_reg_d, M_b_reg_q = 1'h0;
  reg [5:0] M_alufn_reg_d, M_alufn_reg_q = 1'h0;
  localparam INPUT_A_state = 2'd0;
  localparam INPUT_B_state = 2'd1;
  localparam INPUT_ALUFN_state = 2'd2;
  localparam CLEAR_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = INPUT_A_state;
  
  wire [16-1:0] M_alu_out;
  alu_full_9 alu (
    .a(M_a_reg_q),
    .b(M_b_reg_q),
    .alufn(M_alufn_reg_q),
    .out(M_alu_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_a_reg_d = M_a_reg_q;
    M_b_reg_d = M_b_reg_q;
    M_alufn_reg_d = M_alufn_reg_q;
    
    state_display = 1'h0;
    
    case (M_state_q)
      INPUT_A_state: begin
        M_a_reg_d = in;
        state_display = 1'h1;
        if (M_edge_out) begin
          M_state_d = INPUT_B_state;
        end
      end
      INPUT_B_state: begin
        M_b_reg_d = in;
        state_display = 2'h2;
        if (M_edge_out) begin
          M_state_d = INPUT_ALUFN_state;
        end
      end
      INPUT_ALUFN_state: begin
        M_alufn_reg_d = in[0+5-:6];
        state_display = 2'h3;
        if (M_edge_out) begin
          M_state_d = CLEAR_state;
        end
      end
      CLEAR_state: begin
        state_display = 3'h4;
        M_a_reg_d = 1'h0;
        M_b_reg_d = 1'h0;
        M_alufn_reg_d = 1'h0;
        if (M_edge_out) begin
          M_state_d = INPUT_A_state;
        end
      end
    endcase
    out = M_alu_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_reg_q <= 1'h0;
      M_b_reg_q <= 1'h0;
      M_alufn_reg_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_a_reg_q <= M_a_reg_d;
      M_b_reg_q <= M_b_reg_d;
      M_alufn_reg_q <= M_alufn_reg_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
