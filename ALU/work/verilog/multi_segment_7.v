/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module multi_segment_7 (
    input clk,
    input rst,
    input [15:0] number,
    output reg [7:0] seg_out1,
    output reg [7:0] seg_out2,
    output reg [7:0] seg_out3,
    output reg [7:0] seg_out4
  );
  
  
  
  wire [4-1:0] M_decoder1_io_sel;
  wire [8-1:0] M_decoder1_io_out;
  reg [4-1:0] M_decoder1_segment_digit;
  segment_decoder_10 decoder1 (
    .clk(clk),
    .rst(rst),
    .segment_no(2'h0),
    .decimal(1'h0),
    .clear(1'h0),
    .segment_digit(M_decoder1_segment_digit),
    .io_sel(M_decoder1_io_sel),
    .io_out(M_decoder1_io_out)
  );
  
  wire [4-1:0] M_decoder2_io_sel;
  wire [8-1:0] M_decoder2_io_out;
  reg [4-1:0] M_decoder2_segment_digit;
  segment_decoder_10 decoder2 (
    .clk(clk),
    .rst(rst),
    .segment_no(2'h0),
    .decimal(1'h0),
    .clear(1'h0),
    .segment_digit(M_decoder2_segment_digit),
    .io_sel(M_decoder2_io_sel),
    .io_out(M_decoder2_io_out)
  );
  
  wire [4-1:0] M_decoder3_io_sel;
  wire [8-1:0] M_decoder3_io_out;
  reg [4-1:0] M_decoder3_segment_digit;
  segment_decoder_10 decoder3 (
    .clk(clk),
    .rst(rst),
    .segment_no(2'h0),
    .decimal(1'h0),
    .clear(1'h0),
    .segment_digit(M_decoder3_segment_digit),
    .io_sel(M_decoder3_io_sel),
    .io_out(M_decoder3_io_out)
  );
  
  wire [4-1:0] M_decoder4_io_sel;
  wire [8-1:0] M_decoder4_io_out;
  reg [4-1:0] M_decoder4_segment_digit;
  segment_decoder_10 decoder4 (
    .clk(clk),
    .rst(rst),
    .segment_no(2'h0),
    .decimal(1'h0),
    .clear(1'h0),
    .segment_digit(M_decoder4_segment_digit),
    .io_sel(M_decoder4_io_sel),
    .io_out(M_decoder4_io_out)
  );
  
  always @* begin
    M_decoder1_segment_digit = number[0+3-:4];
    seg_out1 = M_decoder1_io_out;
    M_decoder2_segment_digit = number[4+3-:4];
    seg_out2 = M_decoder2_io_out;
    M_decoder3_segment_digit = number[8+3-:4];
    seg_out3 = M_decoder3_io_out;
    M_decoder4_segment_digit = number[12+3-:4];
    seg_out4 = M_decoder4_io_out;
  end
endmodule
