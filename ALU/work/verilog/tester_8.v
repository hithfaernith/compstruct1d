/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester_8 (
    input clk,
    input rst,
    input man_reset,
    input corrupt,
    output reg [7:0] out,
    output reg [15:0] alu_display
  );
  
  
  
  reg [15:0] a;
  reg [15:0] b;
  reg [5:0] alufn;
  
  localparam ADD_state = 3'd0;
  localparam MULTIPLY_state = 3'd1;
  localparam AND_state = 3'd2;
  localparam LEFT_SHIFT_state = 3'd3;
  localparam COMPARE_EQ_state = 3'd4;
  localparam SUCCESS_state = 3'd5;
  localparam ERROR_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = ADD_state;
  
  wire [16-1:0] M_alu_out;
  alu_full_11 alu (
    .a(a),
    .b(b),
    .alufn(alufn),
    .out(M_alu_out)
  );
  
  reg [15:0] alu_out;
  
  always @* begin
    M_state_d = M_state_q;
    
    if (corrupt) begin
      alu_out = ~M_alu_out;
    end else begin
      alu_out = M_alu_out;
    end
    
    case (M_state_q)
      ADD_state: begin
        a = 1'h1;
        b = 1'h1;
        alufn[1+4-:5] = 5'h00;
        if (alu_out == 2'h2) begin
          M_state_d = MULTIPLY_state;
          out = 1'h1;
        end else begin
          M_state_d = ERROR_state;
          out = 8'hf1;
        end
      end
      MULTIPLY_state: begin
        a = 1'h1;
        b = 2'h2;
        alufn[1+4-:5] = 5'h01;
        if (alu_out == 2'h2) begin
          M_state_d = AND_state;
          out = 2'h2;
        end else begin
          M_state_d = ERROR_state;
          out = 8'hf2;
        end
      end
      AND_state: begin
        a = 1'h1;
        b = 1'h1;
        alufn = 6'h18;
        if (alu_out == 1'h1) begin
          M_state_d = LEFT_SHIFT_state;
          out = 2'h3;
        end else begin
          M_state_d = ERROR_state;
          out = 8'hf3;
        end
      end
      LEFT_SHIFT_state: begin
        a = 2'h2;
        b = 16'h0002;
        alufn = 6'h22;
        if (alu_out == 4'h8) begin
          M_state_d = COMPARE_EQ_state;
          out = 3'h4;
        end else begin
          M_state_d = ERROR_state;
          out = 8'hf4;
        end
      end
      COMPARE_EQ_state: begin
        a = 1'h1;
        b = 1'h1;
        alufn = 6'h33;
        if (alu_out == 1'h1) begin
          M_state_d = SUCCESS_state;
          out = 3'h5;
        end else begin
          M_state_d = ERROR_state;
          out = 8'hf5;
        end
      end
      ERROR_state: begin
        a = 1'h0;
        b = 1'h0;
        alufn = 1'h0;
        out = 8'hff;
        if (man_reset) begin
          M_state_d = ADD_state;
        end else begin
          M_state_d = ERROR_state;
        end
      end
      SUCCESS_state: begin
        a = 1'h0;
        b = 1'h0;
        alufn = 1'h0;
        out = 8'haa;
        if (man_reset) begin
          M_state_d = ADD_state;
        end else begin
          M_state_d = SUCCESS_state;
        end
      end
    endcase
    if (man_reset) begin
      M_state_d = ADD_state;
    end
    alu_display = alu_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
