global Colors {
  const BLUE = 24hFF0000;
  const BLACK = 24h000000;
  const GREEN = 24h0000FF;
  const DARK_GREEN = 24h200132;
  const OLIVE = 24h008080;
  
  const INDIGO = 24h824B00;
  const RED = 24h00FF00;
  const GRAY = 24h010101;
  
  const PLAYER_DROP_COLOR = GREEN;
  const PLAYER_PICK_COLOR = OLIVE;
  
  const TOWER_COLOR = BLUE;  
  const DISK_COLOR = INDIGO;
  const ACTIVE_DISK_COLOR = DARK_GREEN;
  const ENEMY_COLOR = RED;
}

module hanoi_display (
    input clk,  // clock
    input rst,  // reset
    input player_position[8],
    input tower_positions[3][8],
    input enemy_positions[8][8],
    input enemy_dirs[8][2],
    input tower_disks[3][4],
    input active_disk[4],
    input pick_or_drop,
    output led
  ) {
    
  dual_matrix led_matrix(
    #WIDTH(32), #HEIGHT(8), .clk(clk), .rst(rst)
  );
  
  tower_display tower_color(
    .tower_positions(tower_positions)
  );
  
  player_display player_color(
    .player_position(player_position),
    .pick_or_drop(pick_or_drop)
  );
  
  enemy_display enemy_color(
    .enemy_positions(enemy_positions),
    .enemy_dirs(enemy_dirs)
  );
  
  always {
    led_matrix.update = 1;
    led = led_matrix.led;
    
    tower_color.x = led_matrix.x;
    tower_color.y = led_matrix.y;
    tower_color.tower_disks = tower_disks;
    
    player_color.x = led_matrix.x;
    player_color.y = led_matrix.y;
    player_color.player_disk = active_disk;
    
    enemy_color.x = led_matrix.x;
    enemy_color.y = led_matrix.y;
    led_matrix.color = Colors.BLACK;
    
    if (led_matrix.screen == 0) {
      if (enemy_color.color == Colors.ENEMY_COLOR) {
        led_matrix.color = enemy_color.color;
      } else {
        led_matrix.color = (
          tower_color.color ^ player_color.color
        );
      }
    }
    
    if ((led_matrix.screen == 1) && (led_matrix.y == 7)) {
      led_matrix.color = Colors.GRAY;
    }
  }
}










