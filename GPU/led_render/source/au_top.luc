module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    input reset_signal,
    input pick_drop_physical_signal,
    input up_signal,
    input down_signal,
    input left_signal,
    input right_signal
  ) {
  
  sig rst;                  // reset signal
  sig pmove[4];
  sig pmove_physical[4];
  
  sig reset_final;
  sig pick_or_drop_final;
  sig pmove_final[4];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner pick_drop_shield_button(#MIN_DELAY(50), .in(io_button[1]));
    edge_detector pick_drop_edge(#RISE(1), #FALL(0), .in(pick_or_drop_final));
    
    button_conditioner pick_drop_physical_cond(#MIN_DELAY(50), .in(pick_drop_physical_signal));
    
    .rst(rst) {
      counter slowclock(#SIZE(1), #DIV(14));
      dff pick_or_drop;
    }
  }
  
  hanoi_display display(.clk(clk), .rst(rst));
  game_state_machine gsm(
    .clk(slowclock.value),
    .rst(rst),
    .pmove(pmove_final),
    .pick_or_drop(pick_or_drop.q),
    .reset_game(reset_final)
  );
  always {
    pmove_physical[0] = ~up_signal;
    pmove_physical[1] = ~down_signal;
    pmove_physical[2] = ~left_signal;
    pmove_physical[3] = ~right_signal;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    pmove[0] = io_button[0];
    pmove[3:1] = io_button[4:2];
    
    io_led = io_dip;
    io_led[0][7] = pick_or_drop.q;
    io_led[0][6] = reset_signal;
    io_led[0][5] = pick_drop_shield_button.out;
    
    io_led[0][3:0] = pmove;
    io_led[1][5:0] = gsm.current_state;
    io_seg = 8hFF;
    io_sel = 4b1111;
    
    display.player_position = gsm.dump_player_pos;
    display.enemy_positions = gsm.dump_enemy_positions;
    display.enemy_dirs = gsm.dump_enemy_directions;
    display.tower_disks = gsm.dump_tower_states;
    display.tower_positions = gsm.dump_tower_positions;
    display.active_disk = gsm.dump_active_disk;
    display.pick_or_drop = pick_or_drop.q;
    
    outled = display.led;
    led = 8hFF;
    
    pick_or_drop.d = pick_or_drop.q ^ pick_drop_edge.out;
    
    
    pick_or_drop_final = pick_drop_shield_button.out | ~pick_drop_physical_cond.out;
    reset_final = io_dip[0][0] | ~reset_signal;
    pmove_final = pmove | pmove_physical;
    
    if (reset_final) {
      pick_or_drop.d = 0;
    }
    
  }
}
