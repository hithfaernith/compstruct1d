module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  matrix led_matrix(
    #WIDTH(32), #HEIGHT(8), .clk(clk), .rst(rst)
  );
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  sig x_coordinate[5];
  sig y_coordinate[3];
  sig pixel_no[8];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    x_coordinate = io_dip[0][4:0];
    y_coordinate = io_dip[0][7:5];
    pixel_no = led_matrix.pixel;
    io_led[0][4:0] = x_coordinate;
    io_led[1][7:5] = y_coordinate;
    
    led_matrix.update = 1b1; // sample write 
    led_matrix.color = 24h000000;
    outled = led_matrix.led;
    io_led[1][0] = 1b0;

    if (
      (x_coordinate == led_matrix.x) &&
      (y_coordinate == led_matrix.y)
    ) {
      led_matrix.color = 24h010000;
    }
    
    io_led[2] = pixel_no;
  }
}
