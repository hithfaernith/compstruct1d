/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_unit_13 (
    input clk,
    input rst,
    input [15:0] asel,
    input aconst,
    input [15:0] bsel,
    input bconst,
    input [3:0] wsel,
    input we,
    input [15:0] wd,
    output reg [15:0] aout,
    output reg [15:0] bout,
    output reg [7:0] dump_player_pos,
    output reg [15:0] dump_player_counter,
    output reg [15:0] dump_enemy_no,
    output reg [15:0] dump_tower_no,
    output reg [15:0] dump_last_fire_wait,
    output reg [3:0] dump_active_disk,
    output reg [15:0] dump_game_state,
    output reg [63:0] dump_enemy_positions,
    output reg [15:0] dump_enemy_directions,
    output reg [127:0] dump_enemy_move_waits,
    output reg [23:0] dump_tower_positions,
    output reg [11:0] dump_tower_states
  );
  
  
  
  integer i;
  
  localparam NUM_ENEMIES = 4'h8;
  
  localparam NUM_TOWERS = 2'h3;
  
  reg [7:0] M_player_pos_d, M_player_pos_q = 1'h0;
  reg [15:0] M_player_counter_d, M_player_counter_q = 1'h0;
  reg [15:0] M_enemy_no_d, M_enemy_no_q = 1'h0;
  reg [15:0] M_tower_no_d, M_tower_no_q = 1'h0;
  reg [15:0] M_last_fire_wait_d, M_last_fire_wait_q = 1'h0;
  reg [3:0] M_active_disk_d, M_active_disk_q = 1'h0;
  reg [15:0] M_game_state_d, M_game_state_q = 1'h0;
  reg [63:0] M_enemy_positions_d, M_enemy_positions_q = 64'h0000000000000000;
  reg [15:0] M_enemy_directions_d, M_enemy_directions_q = 1'h0;
  reg [127:0] M_enemy_move_waits_d, M_enemy_move_waits_q = 1'h0;
  reg [23:0] M_tower_positions_d, M_tower_positions_q = 24'h87cfb6;
  reg [11:0] M_tower_states_d, M_tower_states_q = 12'hf00;
  
  reg [7:0] selected_enemy_position;
  
  reg [1:0] selected_enemy_direction;
  
  reg [15:0] selected_enemy_move_wait;
  
  reg [7:0] selected_tower_position;
  
  reg [3:0] selected_tower_state;
  
  always @* begin
    M_last_fire_wait_d = M_last_fire_wait_q;
    M_game_state_d = M_game_state_q;
    M_tower_no_d = M_tower_no_q;
    M_player_pos_d = M_player_pos_q;
    M_tower_states_d = M_tower_states_q;
    M_active_disk_d = M_active_disk_q;
    M_tower_positions_d = M_tower_positions_q;
    M_enemy_move_waits_d = M_enemy_move_waits_q;
    M_enemy_no_d = M_enemy_no_q;
    M_player_counter_d = M_player_counter_q;
    M_enemy_positions_d = M_enemy_positions_q;
    M_enemy_directions_d = M_enemy_directions_q;
    
    selected_enemy_position = 1'h0;
    selected_enemy_direction = 1'h0;
    selected_enemy_move_wait = 1'h0;
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      if (M_enemy_no_q == i) begin
        selected_enemy_position = M_enemy_positions_q[(i)*8+7-:8];
        selected_enemy_direction = M_enemy_directions_q[(i)*2+1-:2];
        selected_enemy_move_wait = M_enemy_move_waits_q[(i)*16+15-:16];
      end
    end
    selected_tower_position = 1'h0;
    selected_tower_state = 1'h0;
    for (i = 1'h0; i < 2'h3; i = i + 1) begin
      if (M_tower_no_q == i) begin
        selected_tower_position = M_tower_positions_q[(i)*8+7-:8];
        selected_tower_state = M_tower_states_q[(i)*4+3-:4];
      end
    end
    aout = 1'h0;
    if (aconst) begin
      aout = asel;
    end else begin
      
      case (asel)
        1'h0: begin
          aout = M_player_pos_q;
        end
        1'h1: begin
          aout = M_player_counter_q;
        end
        2'h2: begin
          aout = M_enemy_no_q;
        end
        2'h3: begin
          aout = M_tower_no_q;
        end
        3'h4: begin
          aout = M_last_fire_wait_q;
        end
        3'h5: begin
          aout = M_active_disk_q;
        end
        3'h6: begin
          aout = M_game_state_q;
        end
        3'h7: begin
          aout = selected_enemy_position;
        end
        4'h8: begin
          aout = selected_enemy_direction;
        end
        4'h9: begin
          aout = selected_enemy_move_wait;
        end
        4'ha: begin
          aout = selected_tower_position;
        end
        4'hb: begin
          aout = selected_tower_state;
        end
      endcase
    end
    bout = 1'h0;
    if (bconst) begin
      bout = bsel;
    end else begin
      
      case (bsel)
        1'h0: begin
          bout = M_player_pos_q;
        end
        1'h1: begin
          bout = M_player_counter_q;
        end
        2'h2: begin
          bout = M_enemy_no_q;
        end
        2'h3: begin
          bout = M_tower_no_q;
        end
        3'h4: begin
          bout = M_last_fire_wait_q;
        end
        3'h5: begin
          bout = M_active_disk_q;
        end
        3'h6: begin
          bout = M_game_state_q;
        end
        3'h7: begin
          bout = selected_enemy_position;
        end
        4'h8: begin
          bout = selected_enemy_direction;
        end
        4'h9: begin
          bout = selected_enemy_move_wait;
        end
        4'ha: begin
          bout = selected_tower_position;
        end
        4'hb: begin
          bout = selected_tower_state;
        end
      endcase
    end
    if (we) begin
      
      case (wsel)
        1'h0: begin
          M_player_pos_d = wd;
        end
        1'h1: begin
          M_player_counter_d = wd;
        end
        2'h2: begin
          M_enemy_no_d = wd;
        end
        2'h3: begin
          M_tower_no_d = wd;
        end
        3'h4: begin
          M_last_fire_wait_d = wd;
        end
        3'h5: begin
          M_active_disk_d = wd;
        end
        3'h6: begin
          M_game_state_d = wd;
        end
        3'h7: begin
          for (i = 1'h0; i < 4'h8; i = i + 1) begin
            if (M_enemy_no_q == i) begin
              M_enemy_positions_d[(i)*8+7-:8] = wd;
            end
          end
        end
        4'h8: begin
          for (i = 1'h0; i < 4'h8; i = i + 1) begin
            if (M_enemy_no_q == i) begin
              M_enemy_directions_d[(i)*2+1-:2] = wd;
            end
          end
        end
        4'h9: begin
          for (i = 1'h0; i < 4'h8; i = i + 1) begin
            if (M_enemy_no_q == i) begin
              M_enemy_move_waits_d[(i)*16+15-:16] = wd;
            end
          end
        end
        4'ha: begin
          for (i = 1'h0; i < 2'h3; i = i + 1) begin
            if (M_tower_no_q == i) begin
              M_tower_positions_d[(i)*8+7-:8] = wd;
            end
          end
        end
        4'hb: begin
          for (i = 1'h0; i < 2'h3; i = i + 1) begin
            if (M_tower_no_q == i) begin
              M_tower_states_d[(i)*4+3-:4] = wd;
            end
          end
        end
      endcase
    end
    dump_player_pos = M_player_pos_q;
    dump_player_counter = M_player_counter_q;
    dump_enemy_no = M_enemy_no_q;
    dump_tower_no = M_tower_no_q;
    dump_last_fire_wait = M_last_fire_wait_q;
    dump_active_disk = M_active_disk_q;
    dump_game_state = M_game_state_q;
    dump_enemy_positions = M_enemy_positions_q;
    dump_enemy_directions = M_enemy_directions_q;
    dump_enemy_move_waits = M_enemy_move_waits_q;
    dump_tower_positions = M_tower_positions_q;
    dump_tower_states = M_tower_states_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_player_pos_q <= 1'h0;
      M_player_counter_q <= 1'h0;
      M_enemy_no_q <= 1'h0;
      M_tower_no_q <= 1'h0;
      M_last_fire_wait_q <= 1'h0;
      M_active_disk_q <= 1'h0;
      M_game_state_q <= 1'h0;
      M_enemy_positions_q <= 64'h0000000000000000;
      M_enemy_directions_q <= 1'h0;
      M_enemy_move_waits_q <= 1'h0;
      M_tower_positions_q <= 24'h87cfb6;
      M_tower_states_q <= 12'hf00;
    end else begin
      M_player_pos_q <= M_player_pos_d;
      M_player_counter_q <= M_player_counter_d;
      M_enemy_no_q <= M_enemy_no_d;
      M_tower_no_q <= M_tower_no_d;
      M_last_fire_wait_q <= M_last_fire_wait_d;
      M_active_disk_q <= M_active_disk_d;
      M_game_state_q <= M_game_state_d;
      M_enemy_positions_q <= M_enemy_positions_d;
      M_enemy_directions_q <= M_enemy_directions_d;
      M_enemy_move_waits_q <= M_enemy_move_waits_d;
      M_tower_positions_q <= M_tower_positions_d;
      M_tower_states_q <= M_tower_states_d;
    end
  end
  
endmodule
